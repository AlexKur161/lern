// setTimeout позволяет вызвать функцию один раз через определённый интервал времени.
// setInterval позволяет вызывать функцию регулярно, повторяя вызов через определённый интервал времени.
// Методы setInterval(func, delay, ...args) и setTimeout(func, delay, ...args)
//  позволяют выполнять func регулярно или только один раз после задержки delay, заданной в мс.
// Для отмены выполнения необходимо вызвать clearInterval/clearTimeout
//  со значением, которое возвращают методы setInterval/setTimeout.
// Вложенный вызов setTimeout является более гибкой альтернативой setInterval.
//  Также он позволяет более точно задать интервал между выполнениями.
// Планирование с нулевой задержкой setTimeout(func,0) или, что то же самое,
//  setTimeout(func) используется для вызовов, которые должны
//   быть исполнены как можно скорее, после завершения исполнения текущего кода.
// Браузер ограничивает 4-мя мс минимальную задержку между пятью и более
//  вложенными вызовами setTimeout, а также для setInterval, начиная с 5-го вызова.


// Любой вызов setTimeout будет выполнен только после того, как текущий код завершится.

// Последним значением i будет: 100000000.

let i = 0;

setTimeout(() => alert(i), 100); // 100000000

// предположим, что время выполнения этой функции >100 мс
for(let j = 0; j < 100000000; j++) {
  i++;
}