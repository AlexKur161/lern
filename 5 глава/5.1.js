// Обёртки примитивных типов в JavaScript
// За исключением null и undefined, все примитивные значения имеют объектный аналог, который оборачивает значение примитивного типа:

// String для string примитива.
// Number для number примитива.
// BigInt для bigint примитива.
// Boolean для boolean примитива.
// Symbol для symbol примитива.
// Метод valueOf() типа обёртки возвращает значение примитивного типа.

// Методы строк 

// toLowerCase
// Преобразует символы в строке в нижний регистр.
let low = 'Hello Tproger';
low.toLowerCase(); // "hello tproger"

// toUpperCase
// Преобразует символы в строке в верхний регистр.
let upper = 'Hello Tproger';
upper.toUpperCase(); // "HELLO TPROGER"

// concat
// Объединяет две или более строки и возвращает одну строку.

"Hello".concat(" Tproger"); // "Hello Tproger"
"Hello".concat(" T", "p", "r", "o", "g", "e", "r"); // "Hello Tproger"
console.log("Hello".concat(" T", "p", "r", "o", "g", "e", "r"))

// split
// Разбивает строку в массив по указанному разделителю, которым может
// быть подстрока или регулярное выражение. Вторым параметром можно указать ограничитель.

// Получаем каждый символ
"Hello Tproger".split(""); // ["H", "e", "l", "l", "o", " ", "T", "p", "r", "o", "g", "e", "r"]

// Получаем каждое слово из строки
"Hello Tproger".split(" "); //["Hello", "Tproger"]

// Устанавливаем ограничитель
"Hello Tproger".split(" ", 1); //["Hello"]

// Как повторить строку
// repeat
// Принимает в качестве параметра число и повторяет строку указанное количество раз.

"Tproger ".repeat(3); // "Tproger Tproger Tproger "

// charAt
// Возвращает символ по указанному индексу.

"Hello Tproger".charAt(); // "H"
"Hello Tproger".charAt(3); // "l"

// includes
// Проверяет, содержит ли строка указанную подстроку. Возвращает значение true или false.
// Вторым параметром можно указать позицию в строке, с которой следует начать поиск.

"Hello Tproger".includes("Tproger"); // true
"Hello Tproger".includes("Hello", 1); // false

// indexOf
// Возвращает индекс первого найденного вхождения указанного значения.
// Поиск ведётся от начала до конца строки. Если совпадений нет, возвращает -1.
// Вторым параметром можно передать позицию, с которой следует начать поиск.

"Hello World".indexOf("o"); // 4
"Hello World".indexOf("o", 5); // 7

// lastIndexOf
// Возвращает индекс последнего найденного вхождения указанного значения.
// Поиск ведётся от конца к началу строки. Если совпадений нет, возвращает -1.
// Вторым параметром можно передать позицию, с которой следует начать поиск.

"Hello World".lastIndexOf("o"); // 7
"Hello World".lastIndexOf("o", 5); // 4

// endsWith
// Проверяет, заканчивается ли строка символами, заданными первым параметром.
// Возвращает true или false.
// Есть второй необязательный параметр — ограничитель по диапазону поиска.
// По умолчанию он равен длине строки.

"Hello Tproger".endsWith("Tproger"); // true
"Hello Tproger".endsWith("Tproger", 12); // false

// startsWith
// Проверяет, начинается ли строка с указанных символов.
// Возвращает true или false. Вторым параметром можно указать индекс,
// с которого следует начать проверку.

"Hello Tproger".startsWith("Hello"); // true
"Hello Tproger".startsWith("Hello", 1); // false

// search
// Проверяет, есть ли в строке указанное значение
// или регулярное выражение и возвращает индекс начала совпадения.

"hi, hello, hey".search("hello"); // 4

// slice
// Извлекает часть строки и возвращает новую строку.
// Обязательный параметр — начало извлечения.
// Вторым параметром можно установить границу (по умолчанию — до конца строки).

"Методы строк на Tproger".slice(16); // "Tproger"
"Методы строк на Tproger".slice(16, 21); // "Tprog"

// Отрицательные значения тоже работают
"Методы строк на Tproger".slice(-7); // "Tproger"
"Методы строк на Tproger".slice(-7, -2); // "Tprog"

// Как заменить подстроку
// replace
// Ищет в строке указанное значение или регулярное выражение и возвращает новую строку,
//  в которой выполнена замена на второй параметр.
//   Можно заменить найденные значения другой строкой или передать функцию для работы над совпадениями.

"hi, hello, hi".replace("hi", "hey"); // "hey, hello, hi"
"hi, hello, hi".replace(/hi/g, "hey"); // "hey, hello, hey"

// replaceAll
// Даёт такой же результат, как метод replace() с глобальным флагом g.
//  Заменяет все найденные совпадения другой строкой или переданной функцией.

"hi, hello, hi".replaceAll("hi", "hey"); // "hey, hello, hey"

// Как удалить пробелы в строке
// trim
// Обрезает пробелы с обоих концов строки.

"   Hello Tproger ".trim(); // "Hello Tproger"

// trimEnd
// Обрезает пробелы в конце строки

"   Hello Tproger ".trimEnd(); // "   Hello Tproger"

// trimStart
// Обрезает пробелы в начале строки

"   Hello Tproger ".trimStart(); // "Hello Tproger "


// ******Методы чисел*********

// Все числовые методы можно использовать с любым типом чисел (литералами, переменными или выражениями):

let x = 123;
x.toString();            // возвращает 123 из переменной x
(123).toString();        // возвращает 123 из литерала 123
(100 + 23).toString();   // возвращает 123 из выражения 100 + 23

// Метод toFixed()
// Метод toFixed() возвращает строку с числом, записанным с указанным количеством десятичных знаков:

Пример
let x1 = 9.656;
x1.toFixed(0);           // возвращает 10
x1.toFixed(2);           // возвращает 9.66
x1.toFixed(4);           // возвращает 9.6560
x1.toFixed(6);           // возвращает 9.656000

// Метод valueOf()
// Метод valueOf() возвращает число как число.

Пример
var x4 = 123;
x4.valueOf();            // возвращает 123 из переменной x
(123).valueOf();        // возвращает 123 из литерала 123
(100 + 23).valueOf();   // возвращает 123 из выражения 100 + 23
// В JavaScript число может быть примитивным значением (typeof = number) или объектом (typeof = object).

// Этот valueOf() метод используется внутри JavaScript для преобразования объектов Number в примитивные значения.

// Нет причин использовать это в вашем коде.

// Все типы данных JavaScript имеют valueOf() и toString() метод.

// Статические методы
// Number.isFinite()
// Определите, является ли передаваемое значение конечным числом.

// Number.isInteger()
// Определите, является ли передаваемое значение целым числом.

// Number.isNaN()
// Определите, является ли передаваемое значение NaN.

// Number.isSafeInteger()
// Определите, является ли передаваемое значение безопасным целым числом (числом между -(253 - 1) и 253 - 1).

// Number.parseFloat()
// Это то же самое, что и глобальная parseFloat() функция.

// Number.parseInt()
// Это то же самое, что и глобальная parseInt() функция.